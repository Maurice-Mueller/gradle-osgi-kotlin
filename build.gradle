buildscript {

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath("org.junit.platform:junit-platform-gradle-plugin:$junitVersion")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    classpath("org.jayware:gradle-osgi-ds:0.5.5")
    classpath("biz.aQute.bnd:biz.aQute.bnd.gradle:3.4.0")
  }
}

plugins {
  //if you change the kotlin version here, also change in gradle.properties
  id "org.jetbrains.kotlin.jvm" version "1.1.4"
}

apply {
  plugin("org.junit.platform.gradle.plugin")
  //plugin("org.jayware.osgi-ds")
  //plugin("biz.aQute.bnd.workspace")
  //plugin("biz.aQute.bnd.builder")
}

project.version = "1.0.0-dev"


//val startParameter by test //example to access a start parameter ./gradlew -Ptest=MyValue

repositories {
  mavenCentral()
}

sourceSets {
  main.kotlin.srcDirs += 'src/main/myKotlin'
  main.java.srcDirs += 'src/main/myJava'
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib"
  compile("org.apache.cxf:cxf-rt-frontend-jaxrs:${cxfVersion}")
  compile("org.apache.cxf:cxf-rt-transports-http:${cxfVersion}")
  compile("org.apache.cxf:cxf-rt-transports-http-jetty:${cxfVersion}")
  compile("org.apache.cxf:cxf-rt-rs-client:${cxfVersion}")
  compile("com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jacksonVersion}")
  compile("org.osgi:org.osgi.core:${osgiVersion}")
  compile("org.osgi:osgi.cmpn:${osgiVersion}")
  testCompile("org.jetbrains.kotlin:kotlin-test:${kotlinVersion}")
  testCompile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
  testCompile("org.jetbrains.spek:spek-api:${spekVersion}")
  testCompile("org.junit.platform:junit-platform-launcher:${junitVersion}")
  testRuntime("org.jetbrains.spek:spek-junit-platform-engine:${junitVersion}")
}

task(fatJar, type: Jar) {
  baseName = "${project.name}-fat"

  manifest {
    attributes["Manifest-Version"] = 1.0
    attributes["Bundle-ManifestVersion"] = 2
    attributes["Bundle-Name"] = baseName
    attributes["Bundle-SymbolicName"] = baseName
    attributes["Bundle-Description"] = "Nice project"
    attributes["Bundle-Version"] = "1.0.0"
    //attributes["Bundle-Activator"] = application.mainClassName
    attributes["Import-Package"] = "org.osgi.framework;com.example.ex9.service;org.osgi.util.tracker"
    attributes["Export-Import-Package"] = "com.example.ex9b"
    attributes["Service-Component"] = "OSGI-INF/com.example.ex9b.ReadWordsAndCheckSpelling.xml"  //this file is generated by OSGI; because we generate our own manifest (which is not recommended) then we need to add this file as a service component
  }
}

def karafDockerImageName = "karaf-server"
def karafDockerContainerName = "karaf"

def startKaraf = task("startKaraf", type: Exec) {
  commandLine = ["docker", "start", karafDockerContainerName]
}

task(stopKaraf, type: Exec) {
  commandLine = ["docker", "stop", karafDockerContainerName]
}

task(deployKaraf, type: Exec) {
  commandLine = ["echo", "started successfully"]
}

def runKaraf = task("runKaraf", type:Exec) {

  println("Did you mean: startKaraf?")

  def exposedPorts = ["1099", "8101", "8181", "44444"]

  def portParameters = []
  exposedPorts.forEach {
    portParameters.add("-p")
    portParameters.add(it)
  }

  commandLine = ["docker", "run", "-d", "--name", karafDockerContainerName, "-p", "1099:1099", karafDockerImageName]
}

task(buildKaraf) {
  doLast {
    exec {
      def context = "src/docker"
      def dockerFile = "src/docker/Karaf.Dockerfile"
      commandLine = arrayListOf("docker", "build", "-t", karafDockerImageName, "-f", dockerFile, context)
    }
    runKaraf.execute()
    println("hello")
    exec {
      println("hello2")
      commandLine = arrayListOf("docker", "exec", "-t", karafDockerContainerName, "/opt/karaf/wait-for-karaf-start.sh")
    }
    exec {
      println("hello3")
      commandLine = arrayListOf("docker", "exec", "-t", karafDockerContainerName, "/opt/karaf/karaf-features-install.sh")
    }
  }
}

task(rmKarafContainer, type: Exec) {
  commandLine = ["docker", "rm", karafDockerContainerName]
}

task("bashKaraf", type:  Exec) {
  commandLine = ["docker", "exec", "-itd", karafDockerContainerName, "echo", "hello"]
}

tasks {
  build {
    dependsOn(fatJar)
  }
  deployKaraf {
    dependsOn(rmKarafContainer, buildKaraf, runKaraf)
  }
}

task(copyJarToDocker, type: Exec) {
  commandLine = ["docker", "cp", "build/libs/${project.name}-fat-1.0.0-dev.jar", "${karafDockerContainerName}:/opt/karaf/builds/"]
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.1'
}
