import aQute.bnd.gradle.Bundle

buildscript {

  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath("org.junit.platform:junit-platform-gradle-plugin:$junitVersion")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    classpath("org.jayware:gradle-osgi-ds:0.5.5")
//    classpath("gradle.plugin.com.athaydes.gradle.osgi:osgi-run-core:1.3.1")
    classpath("biz.aQute.bnd:biz.aQute.bnd.gradle:3.4.0")
  }
}


apply plugin: "biz.aQute.bnd.workspace"

allprojects {
  repositories {
    mavenCentral()
  }

  apply plugin: "org.junit.platform.gradle.plugin"
  apply plugin: "org.jayware.osgi-ds"
//  apply plugin: "com.athaydes.osgi-ds"
  apply plugin: "biz.aQute.bnd.builder"
  apply plugin: "org.jetbrains.kotlin.jvm"

  sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
  }

  dependencies {
    compile "org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion"
    compile("org.apache.cxf:cxf-rt-frontend-jaxrs:${cxfVersion}")
    compile("org.apache.cxf:cxf-rt-transports-http:${cxfVersion}")
    compile("org.apache.cxf:cxf-rt-transports-http-jetty:${cxfVersion}")
    compile("org.apache.cxf:cxf-rt-rs-client:${cxfVersion}")
    compile("com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jacksonVersion}")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")
    compile("org.osgi:org.osgi.core:${osgiVersion}")
    compile("org.osgi:osgi.cmpn:${osgiVersion}")
    testCompile("org.jetbrains.kotlin:kotlin-test:${kotlinVersion}")
    testCompile("org.jetbrains.spek:spek-api:${spekVersion}")
    testCompile("org.junit.platform:junit-platform-launcher:${junitVersion}")
    testRuntime("org.jetbrains.spek:spek-junit-platform-engine:${junitVersion}")
  }
}


project.version = "1.0.0-dev"


//val startParameter by test //example to access a start parameter ./gradlew -Ptest=MyValue

def karafDockerImageName = "karaf-server"
rootProject.ext.karafDockerImageName = karafDockerImageName
def karafDockerContainerName = "karaf"
rootProject.ext.karafDockerContainerName = karafDockerContainerName

def startKaraf = task("startKaraf", type: Exec) {
  commandLine = ["docker", "start", karafDockerContainerName]
}

task(stopKaraf, type: Exec) {
  commandLine = ["docker", "stop", karafDockerContainerName]
}

task(deployKaraf, type: Exec) {
  commandLine = ["echo", "started successfully"]
}

def runKaraf = task("runKaraf", type:Exec) {

  println("Did you mean: startKaraf?")

  def exposedPorts = ["1099", "8101", "8181", "44444", "80", "8080"]

  def portParameters = []
  exposedPorts.forEach {
    portParameters.add("-p")
    portParameters.add(it)
  }

  def commandLineArray = ["docker", "run", "--net=host", "-d", "--name", karafDockerContainerName]
  commandLineArray += portParameters
  commandLineArray += karafDockerImageName

  commandLine = commandLineArray
}

task(buildKaraf) {
  doLast {
    exec {
      def context = "src/docker"
      def dockerFile = "src/docker/Karaf.Dockerfile"
      commandLine = ["docker", "build", "-t", karafDockerImageName, "-f", dockerFile, context]
    }
    runKaraf.execute()
    exec {
      commandLine = ["docker", "exec", "-t", karafDockerContainerName, "/opt/karaf/wait-for-karaf-start.sh"]
    }
    exec {
      commandLine = ["docker", "exec", "-t", karafDockerContainerName, "/opt/karaf/karaf-features-install.sh"]
    }
    stopKaraf.execute()
  }
}

task(rmKarafContainer, type: Exec) {
  commandLine = ["docker", "rm", karafDockerContainerName]
}

task("bashKaraf", type:  Exec) {
  commandLine = ["docker", "exec", "-itd", karafDockerContainerName, "echo", "hello"]
}

tasks {
  deployKaraf {
    dependsOn(rmKarafContainer, buildKaraf, runKaraf)
  }
}

subprojects {
  task(copyJarToDocker, type: Exec) {
    println "${project.name}"
    commandLine = ["docker", "cp", "build/libs/${project.name}.jar", "${rootProject.karafDockerContainerName}:/opt/karaf/builds/"]
  }
}

project(":service") {
  task bundle(type: Bundle) {
    from sourceSets.main.output
    sourceSet = sourceSets.main
    bnd = 'Import-Package: *\n' +
          'Export-Package: !kotlin, com.example.microservice.service\n' +
          'Export-Package: !kotlin, com.example.microservice.api\n' +
          '-output: build/libs/test.jar'
  }
}

project(":consumer") {
  task bundle(type: Bundle) {
    from sourceSets.main.output
    sourceSet = sourceSets.main
    bnd = 'Import-Package: * \n' +
          'Export-Package: !kotlin'
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.1'
}

